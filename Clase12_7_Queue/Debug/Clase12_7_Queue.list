
Clase12_7_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040b0  20000010  08004f10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040c0  08004f10  000240c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001410f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d2  00000000  00000000  0003414f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017097  00000000  00000000  00038980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b9b  00000000  00000000  0004fa17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094da8  00000000  00000000  000615b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f635a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  000f63b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ea0 	.word	0x08004ea0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004ea0 	.word	0x08004ea0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000080 	.word	0x20000080

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fbc7 	bl	8000ca4 <HAL_Init>

  /* USER CODE BEGIN Init */

  vSemaphoreCreateBinary(sem_button);
 8000516:	2203      	movs	r2, #3
 8000518:	2100      	movs	r1, #0
 800051a:	2001      	movs	r0, #1
 800051c:	f002 fb6e 	bl	8002bfc <xQueueGenericCreate>
 8000520:	4603      	mov	r3, r0
 8000522:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <main+0xbc>)
 8000524:	6013      	str	r3, [r2, #0]
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <main+0xbc>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d006      	beq.n	800053c <main+0x30>
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <main+0xbc>)
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	f002 fbba 	bl	8002cb0 <xQueueGenericSend>
  vSemaphoreCreateBinary(sem_toggle);
 800053c:	2203      	movs	r2, #3
 800053e:	2100      	movs	r1, #0
 8000540:	2001      	movs	r0, #1
 8000542:	f002 fb5b 	bl	8002bfc <xQueueGenericCreate>
 8000546:	4603      	mov	r3, r0
 8000548:	4a20      	ldr	r2, [pc, #128]	; (80005cc <main+0xc0>)
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <main+0xc0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d006      	beq.n	8000562 <main+0x56>
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <main+0xc0>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	f002 fba7 	bl	8002cb0 <xQueueGenericSend>

  queue_com=xQueueCreate(1,sizeof(unsigned int));
 8000562:	2200      	movs	r2, #0
 8000564:	2104      	movs	r1, #4
 8000566:	2001      	movs	r0, #1
 8000568:	f002 fb48 	bl	8002bfc <xQueueGenericCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <main+0xc4>)
 8000570:	6013      	str	r3, [r2, #0]

  xSemaphoreTake(sem_button,0);
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <main+0xbc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fe05 	bl	8003188 <xQueueSemaphoreTake>
  xSemaphoreTake(sem_toggle,0);
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <main+0xc0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fdff 	bl	8003188 <xQueueSemaphoreTake>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f82b 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f90d 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8e1 	bl	8000758 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000596:	f000 f891 	bl	80006bc <MX_TIM2_Init>
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(Task_Time, "Cuenta Timer", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <main+0xc8>)
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <main+0xcc>)
 80005aa:	f003 f87e 	bl	80036aa <xTaskCreate>
  xTaskCreate(Task_Toggle, "Toggle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <main+0xd0>)
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <main+0xd4>)
 80005be:	f003 f874 	bl	80036aa <xTaskCreate>
  vTaskStartScheduler();
 80005c2:	f003 f9dd 	bl	8003980 <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0xba>
 80005c8:	20004070 	.word	0x20004070
 80005cc:	2000406c 	.word	0x2000406c
 80005d0:	20003fdc 	.word	0x20003fdc
 80005d4:	08004eb8 	.word	0x08004eb8
 80005d8:	08000941 	.word	0x08000941
 80005dc:	08004ec8 	.word	0x08004ec8
 80005e0:	080008dd 	.word	0x080008dd

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fc4c 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd4>)
 8000632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000662:	2304      	movs	r3, #4
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000666:	2307      	movs	r3, #7
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe24 	bl	80012bc <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067a:	f000 f9ad 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f886 	bl	80017ac <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a6:	f000 f997 	bl	80009d8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_TIM2_Init+0x98>)
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_TIM2_Init+0x98>)
 80006e2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80006e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_TIM2_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_TIM2_Init+0x98>)
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_TIM2_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_TIM2_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_TIM2_Init+0x98>)
 8000704:	f001 fa80 	bl	8001c08 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800070e:	f000 f963 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_TIM2_Init+0x98>)
 8000720:	f001 fcae 	bl	8002080 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800072a:	f000 f955 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_TIM2_Init+0x98>)
 800073c:	f001 feaa 	bl	8002494 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000746:	f000 f947 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20003fe0 	.word	0x20003fe0

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f001 ff02 	bl	8002598 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f91d 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004028 	.word	0x20004028
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_GPIO_Init+0xe0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a30      	ldr	r2, [pc, #192]	; (800088c <MX_GPIO_Init+0xe0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_GPIO_Init+0xe0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <MX_GPIO_Init+0xe0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xe0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xe0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xe0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xe0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xe0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_GPIO_Init+0xe0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xe0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <MX_GPIO_Init+0xe4>)
 8000838:	f000 fcf4 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000842:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4810      	ldr	r0, [pc, #64]	; (8000894 <MX_GPIO_Init+0xe8>)
 8000854:	f000 fb4a 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_GPIO_Init+0xe4>)
 8000870:	f000 fb3c 	bl	8000eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2105      	movs	r1, #5
 8000878:	2028      	movs	r0, #40	; 0x28
 800087a:	f000 fb0d 	bl	8000e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087e:	2028      	movs	r0, #40	; 0x28
 8000880:	f000 fb26 	bl	8000ed0 <HAL_NVIC_EnableIRQ>

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sem_button,&xHigherPriorityTaskWoken);
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f107 020c 	add.w	r2, r7, #12
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fafb 	bl	8002eac <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d007      	beq.n	80008cc <HAL_GPIO_EXTI_Callback+0x34>
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80008be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	f3bf 8f6f 	isb	sy


}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20004070 	.word	0x20004070
 80008d8:	e000ed04 	.word	0xe000ed04

080008dc <Task_Toggle>:

void Task_Toggle(void* pVParameters)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	unsigned int toggle = TOGGLE_0_5Hz;
 80008e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e8:	60fb      	str	r3, [r7, #12]
	unsigned int valor_recibido;
	while(1)
	{
		if(xQueueReceive(queue_com, &valor_recibido, 0) == pdPASS)
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <Task_Toggle+0x58>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f107 0108 	add.w	r1, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fb67 	bl	8002fc8 <xQueueReceive>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d111      	bne.n	8000924 <Task_Toggle+0x48>
		{

			if(valor_recibido <  2000/SYS_TICK_MS)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	ee07 3a90 	vmov	s15, r3
 8000906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800090a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000938 <Task_Toggle+0x5c>
 800090e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000916:	d503      	bpl.n	8000920 <Task_Toggle+0x44>
				toggle = TOGGLE_0_5Hz;
 8000918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e001      	b.n	8000924 <Task_Toggle+0x48>
			else
				toggle = TOGGLE_2Hz;
 8000920:	23fa      	movs	r3, #250	; 0xfa
 8000922:	60fb      	str	r3, [r7, #12]
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000924:	2120      	movs	r1, #32
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <Task_Toggle+0x60>)
 8000928:	f000 fc95 	bl	8001256 <HAL_GPIO_TogglePin>
		vTaskDelay(toggle);
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f002 fff3 	bl	8003918 <vTaskDelay>
		if(xQueueReceive(queue_com, &valor_recibido, 0) == pdPASS)
 8000932:	e7da      	b.n	80008ea <Task_Toggle+0xe>
 8000934:	20003fdc 	.word	0x20003fdc
 8000938:	469c4000 	.word	0x469c4000
 800093c:	40020000 	.word	0x40020000

08000940 <Task_Time>:
	}


}
void Task_Time(void* pVParameters)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

	while(1)
	{
		xSemaphoreTake(sem_button,portMAX_DELAY);
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <Task_Time+0x60>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fc19 	bl	8003188 <xQueueSemaphoreTake>

		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <Task_Time+0x64>)
 800095c:	f000 fc4a 	bl	80011f4 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d108      	bne.n	8000978 <Task_Time+0x38>
		{
			time = __HAL_TIM_GET_COUNTER(&htim2);
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <Task_Time+0x68>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <Task_Time+0x6c>)
 800096e:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start(&htim2);
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <Task_Time+0x68>)
 8000972:	f001 f999 	bl	8001ca8 <HAL_TIM_Base_Start>
 8000976:	e7e7      	b.n	8000948 <Task_Time+0x8>

		}else
		{
			HAL_TIM_Base_Stop(&htim2);
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <Task_Time+0x68>)
 800097a:	f001 f9ef 	bl	8001d5c <HAL_TIM_Base_Stop>
			time = __HAL_TIM_GET_COUNTER(&htim2)-time;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <Task_Time+0x68>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Task_Time+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <Task_Time+0x6c>)
 800098c:	6013      	str	r3, [r2, #0]
			xQueueSend(queue_com,&time,portMAX_DELAY);
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <Task_Time+0x70>)
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	2300      	movs	r3, #0
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	4904      	ldr	r1, [pc, #16]	; (80009ac <Task_Time+0x6c>)
 800099a:	f002 f989 	bl	8002cb0 <xQueueGenericSend>
		xSemaphoreTake(sem_button,portMAX_DELAY);
 800099e:	e7d3      	b.n	8000948 <Task_Time+0x8>
 80009a0:	20004070 	.word	0x20004070
 80009a4:	40020800 	.word	0x40020800
 80009a8:	20003fe0 	.word	0x20003fe0
 80009ac:	20000280 	.word	0x20000280
 80009b0:	20003fdc 	.word	0x20003fdc

080009b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c6:	f000 f98f 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40010000 	.word	0x40010000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_MspInit+0x54>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x54>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 fa35 	bl	8000e98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4c:	d115      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	201c      	movs	r0, #28
 8000a70:	f000 fa12 	bl	8000e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a74:	201c      	movs	r0, #28
 8000a76:	f000 fa2b 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12b      	bne.n	8000b02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af2:	2307      	movs	r3, #7
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_UART_MspInit+0x8c>)
 8000afe:	f000 f9f5 	bl	8000eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2019      	movs	r0, #25
 8000b2e:	f000 f9b3 	bl	8000e98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b32:	2019      	movs	r0, #25
 8000b34:	f000 f9cc 	bl	8000ed0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_InitTick+0xa0>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_InitTick+0xa0>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6453      	str	r3, [r2, #68]	; 0x44
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_InitTick+0xa0>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b54:	f107 0210 	add.w	r2, r7, #16
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f820 	bl	8001ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b64:	f001 f80a 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8000b68:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_InitTick+0xa4>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_InitTick+0xac>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b9a:	f001 f835 	bl	8001c08 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000ba6:	f001 f901 	bl	8001dac <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20004074 	.word	0x20004074
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfa:	f001 f939 	bl	8001e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20004074 	.word	0x20004074

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f001 f92f 	bl	8001e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20003fe0 	.word	0x20003fe0

08000c1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c24:	f000 fb32 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f004 f8d5 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc43 	bl	800050c <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c94:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 8000c98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c9c:	200040c0 	.word	0x200040c0

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8d8 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f7ff ff20 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe84 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200040bc 	.word	0x200040bc

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200040bc 	.word	0x200040bc

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e159      	b.n	80011bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8148 	bne.w	80011b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d017      	beq.n	8000fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80a2 	beq.w	80011b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b57      	ldr	r3, [pc, #348]	; (80011d4 <HAL_GPIO_Init+0x2e8>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a56      	ldr	r2, [pc, #344]	; (80011d4 <HAL_GPIO_Init+0x2e8>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b54      	ldr	r3, [pc, #336]	; (80011d4 <HAL_GPIO_Init+0x2e8>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <HAL_GPIO_Init+0x2ec>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_GPIO_Init+0x2f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x202>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_GPIO_Init+0x2f4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x1fe>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <HAL_GPIO_Init+0x2f8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <HAL_GPIO_Init+0x2fc>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x1f6>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a45      	ldr	r2, [pc, #276]	; (80011ec <HAL_GPIO_Init+0x300>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x1f2>
 80010da:	2304      	movs	r3, #4
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x204>
 80010de:	2307      	movs	r3, #7
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x204>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x204>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x204>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x204>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	; (80011d8 <HAL_GPIO_Init+0x2ec>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_GPIO_Init+0x304>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <HAL_GPIO_Init+0x304>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_GPIO_Init+0x304>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115c:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <HAL_GPIO_Init+0x304>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_GPIO_Init+0x304>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x304>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_GPIO_Init+0x304>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_GPIO_Init+0x304>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f aea2 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	041a      	lsls	r2, r3, #16
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43d9      	mvns	r1, r3
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	400b      	ands	r3, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff faf4 	bl	8000898 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e264      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b9d      	ldr	r3, [pc, #628]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b99      	ldr	r3, [pc, #612]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e23f      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b91      	ldr	r3, [pc, #580]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a90      	ldr	r2, [pc, #576]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b8b      	ldr	r3, [pc, #556]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a8a      	ldr	r2, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a87      	ldr	r2, [pc, #540]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a83      	ldr	r2, [pc, #524]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a80      	ldr	r2, [pc, #512]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fccc 	bl	8000d10 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcc8 	bl	8000d10 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e204      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fcb8 	bl	8000d10 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fcb4 	bl	8000d10 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f0      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b6c      	ldr	r3, [pc, #432]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c4      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b56      	ldr	r3, [pc, #344]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4952      	ldr	r1, [pc, #328]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fc6d 	bl	8000d10 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc69 	bl	8000d10 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a5      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4940      	ldr	r1, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc4c 	bl	8000d10 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fc48 	bl	8000d10 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e184      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d030      	beq.n	8001508 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fc2c 	bl	8000d10 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc28 	bl	8000d10 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e164      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e015      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc15 	bl	8000d10 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fc11 	bl	8000d10 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e14d      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a0 	beq.w	8001656 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10f      	bne.n	8001546 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d121      	bne.n	8001596 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff fbd7 	bl	8000d10 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	e011      	b.n	800158a <HAL_RCC_OscConfig+0x2ce>
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	42470000 	.word	0x42470000
 8001570:	42470e80 	.word	0x42470e80
 8001574:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001578:	f7ff fbca 	bl	8000d10 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e106      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_RCC_OscConfig+0x4e4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x2f0>
 800159e:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a80      	ldr	r2, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e01c      	b.n	80015e6 <HAL_RCC_OscConfig+0x32a>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x312>
 80015b4:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a7a      	ldr	r2, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x32a>
 80015ce:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a74      	ldr	r2, [pc, #464]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb8f 	bl	8000d10 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff fb8b 	bl	8000d10 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0c5      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ee      	beq.n	80015f6 <HAL_RCC_OscConfig+0x33a>
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fb79 	bl	8000d10 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff fb75 	bl	8000d10 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0af      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a55      	ldr	r2, [pc, #340]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 809b 	beq.w	8001796 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d05c      	beq.n	8001726 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d141      	bne.n	80016f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fb49 	bl	8000d10 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fb45 	bl	8000d10 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e081      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	019b      	lsls	r3, r3, #6
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	3b01      	subs	r3, #1
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	061b      	lsls	r3, r3, #24
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb1e 	bl	8000d10 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fb1a 	bl	8000d10 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e056      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x41c>
 80016f6:	e04e      	b.n	8001796 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb07 	bl	8000d10 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fb03 	bl	8000d10 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e03f      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x44a>
 8001724:	e037      	b.n	8001796 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e032      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d028      	beq.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d121      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d11a      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001768:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176a:	4293      	cmp	r3, r2
 800176c:	d111      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40007000 	.word	0x40007000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470060 	.word	0x42470060

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff fa38 	bl	8000d10 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff fa34 	bl	8000d10 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f8e0 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	08004ed8 	.word	0x08004ed8
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	2300      	movs	r3, #0
 800198a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80bd 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e0b7      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019ae:	60bb      	str	r3, [r7, #8]
       break;
 80019b0:	e0b7      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019b4:	60bb      	str	r3, [r7, #8]
      break;
 80019b6:	e0b4      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d04d      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	461a      	mov	r2, r3
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	ea02 0800 	and.w	r8, r2, r0
 80019e6:	ea03 0901 	and.w	r9, r3, r1
 80019ea:	4640      	mov	r0, r8
 80019ec:	4649      	mov	r1, r9
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	014b      	lsls	r3, r1, #5
 80019f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019fc:	0142      	lsls	r2, r0, #5
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	ebb0 0008 	subs.w	r0, r0, r8
 8001a06:	eb61 0109 	sbc.w	r1, r1, r9
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	018b      	lsls	r3, r1, #6
 8001a14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a18:	0182      	lsls	r2, r0, #6
 8001a1a:	1a12      	subs	r2, r2, r0
 8001a1c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	00d9      	lsls	r1, r3, #3
 8001a2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a2e:	00d0      	lsls	r0, r2, #3
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	eb12 0208 	adds.w	r2, r2, r8
 8001a38:	eb43 0309 	adc.w	r3, r3, r9
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	0259      	lsls	r1, r3, #9
 8001a46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a4a:	0250      	lsls	r0, r2, #9
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	f7fe fbc0 	bl	80001e0 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e04a      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	461a      	mov	r2, r3
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	ea02 0400 	and.w	r4, r2, r0
 8001a82:	ea03 0501 	and.w	r5, r3, r1
 8001a86:	4620      	mov	r0, r4
 8001a88:	4629      	mov	r1, r5
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	014b      	lsls	r3, r1, #5
 8001a94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a98:	0142      	lsls	r2, r0, #5
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	1b00      	subs	r0, r0, r4
 8001aa0:	eb61 0105 	sbc.w	r1, r1, r5
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	018b      	lsls	r3, r1, #6
 8001aae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ab2:	0182      	lsls	r2, r0, #6
 8001ab4:	1a12      	subs	r2, r2, r0
 8001ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	00d9      	lsls	r1, r3, #3
 8001ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac8:	00d0      	lsls	r0, r2, #3
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	eb45 0303 	adc.w	r3, r5, r3
 8001ad4:	f04f 0000 	mov.w	r0, #0
 8001ad8:	f04f 0100 	mov.w	r1, #0
 8001adc:	0299      	lsls	r1, r3, #10
 8001ade:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ae2:	0290      	lsls	r0, r2, #10
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f7fe fb74 	bl	80001e0 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	60bb      	str	r3, [r7, #8]
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b1e:	60bb      	str	r3, [r7, #8]
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	68bb      	ldr	r3, [r7, #8]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08004ee8 	.word	0x08004ee8

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffdc 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	08004ee8 	.word	0x08004ee8

08001ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_RCC_GetClockConfig+0x60>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0207 	and.w	r2, r3, #7
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e041      	b.n	8001c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe ff04 	bl	8000a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3304      	adds	r3, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f000 fb0a 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e03c      	b.n	8001d3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_TIM_Base_Start+0xa0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_TIM_Base_Start+0x5c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d013      	beq.n	8001d04 <HAL_TIM_Base_Start+0x5c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_TIM_Base_Start+0xa4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00e      	beq.n	8001d04 <HAL_TIM_Base_Start+0x5c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_Base_Start+0xa8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_TIM_Base_Start+0x5c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_TIM_Base_Start+0xac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_TIM_Base_Start+0x5c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_TIM_Base_Start+0xb0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d111      	bne.n	8001d28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d010      	beq.n	8001d38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d26:	e007      	b.n	8001d38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	40014000 	.word	0x40014000

08001d5c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10f      	bne.n	8001d94 <HAL_TIM_Base_Stop+0x38>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	f240 4344 	movw	r3, #1092	; 0x444
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_Base_Stop+0x38>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d001      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e044      	b.n	8001e4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_TIM_Base_Start_IT+0xb0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d018      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x6c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d013      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x6c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_TIM_Base_Start_IT+0xb4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00e      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x6c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x6c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x6c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_TIM_Base_Start_IT+0xc0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d010      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3a:	e007      	b.n	8001e4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800
 8001e68:	40000c00 	.word	0x40000c00
 8001e6c:	40014000 	.word	0x40014000

08001e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0202 	mvn.w	r2, #2
 8001e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9b5 	bl	8002222 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f9a7 	bl	800220e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f9b8 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0204 	mvn.w	r2, #4
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f98b 	bl	8002222 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f97d 	bl	800220e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f98e 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0208 	mvn.w	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f961 	bl	8002222 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f953 	bl	800220e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f964 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0210 	mvn.w	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f937 	bl	8002222 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f929 	bl	800220e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f93a 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0201 	mvn.w	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fce0 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b80      	cmp	r3, #128	; 0x80
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fab2 	bl	8002584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8ff 	bl	800224a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b20      	cmp	r3, #32
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b20      	cmp	r3, #32
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0220 	mvn.w	r2, #32
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fa7c 	bl	8002570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_TIM_ConfigClockSource+0x1c>
 8002098:	2302      	movs	r3, #2
 800209a:	e0b4      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x186>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d4:	d03e      	beq.n	8002154 <HAL_TIM_ConfigClockSource+0xd4>
 80020d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020da:	f200 8087 	bhi.w	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 80020de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e2:	f000 8086 	beq.w	80021f2 <HAL_TIM_ConfigClockSource+0x172>
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ea:	d87f      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 80020ec:	2b70      	cmp	r3, #112	; 0x70
 80020ee:	d01a      	beq.n	8002126 <HAL_TIM_ConfigClockSource+0xa6>
 80020f0:	2b70      	cmp	r3, #112	; 0x70
 80020f2:	d87b      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d050      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x11a>
 80020f8:	2b60      	cmp	r3, #96	; 0x60
 80020fa:	d877      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 80020fc:	2b50      	cmp	r3, #80	; 0x50
 80020fe:	d03c      	beq.n	800217a <HAL_TIM_ConfigClockSource+0xfa>
 8002100:	2b50      	cmp	r3, #80	; 0x50
 8002102:	d873      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d058      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0x13a>
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d86f      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	d064      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x15a>
 8002110:	2b30      	cmp	r3, #48	; 0x30
 8002112:	d86b      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 8002114:	2b20      	cmp	r3, #32
 8002116:	d060      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x15a>
 8002118:	2b20      	cmp	r3, #32
 800211a:	d867      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 800211c:	2b00      	cmp	r3, #0
 800211e:	d05c      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x15a>
 8002120:	2b10      	cmp	r3, #16
 8002122:	d05a      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x15a>
 8002124:	e062      	b.n	80021ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f000 f98d 	bl	8002454 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	609a      	str	r2, [r3, #8]
      break;
 8002152:	e04f      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f000 f976 	bl	8002454 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002176:	609a      	str	r2, [r3, #8]
      break;
 8002178:	e03c      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	461a      	mov	r2, r3
 8002188:	f000 f8ea 	bl	8002360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2150      	movs	r1, #80	; 0x50
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f943 	bl	800241e <TIM_ITRx_SetConfig>
      break;
 8002198:	e02c      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f000 f909 	bl	80023be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2160      	movs	r1, #96	; 0x60
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f933 	bl	800241e <TIM_ITRx_SetConfig>
      break;
 80021b8:	e01c      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f000 f8ca 	bl	8002360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f923 	bl	800241e <TIM_ITRx_SetConfig>
      break;
 80021d8:	e00c      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f000 f91a 	bl	800241e <TIM_ITRx_SetConfig>
      break;
 80021ea:	e003      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      break;
 80021f0:	e000      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a34      	ldr	r2, [pc, #208]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00f      	beq.n	8002298 <TIM_Base_SetConfig+0x38>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227e:	d00b      	beq.n	8002298 <TIM_Base_SetConfig+0x38>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a31      	ldr	r2, [pc, #196]	; (8002348 <TIM_Base_SetConfig+0xe8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <TIM_Base_SetConfig+0x38>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a30      	ldr	r2, [pc, #192]	; (800234c <TIM_Base_SetConfig+0xec>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0x38>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <TIM_Base_SetConfig+0xf0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d108      	bne.n	80022aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a25      	ldr	r2, [pc, #148]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01b      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d017      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <TIM_Base_SetConfig+0xe8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a21      	ldr	r2, [pc, #132]	; (800234c <TIM_Base_SetConfig+0xec>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00f      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a20      	ldr	r2, [pc, #128]	; (8002350 <TIM_Base_SetConfig+0xf0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00b      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <TIM_Base_SetConfig+0xf4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <TIM_Base_SetConfig+0xf8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_Base_SetConfig+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <TIM_Base_SetConfig+0xfc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d108      	bne.n	80022fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <TIM_Base_SetConfig+0xe4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40014000 	.word	0x40014000
 8002358:	40014400 	.word	0x40014400
 800235c:	40014800 	.word	0x40014800

08002360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f023 0201 	bic.w	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f023 030a 	bic.w	r3, r3, #10
 800239c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	621a      	str	r2, [r3, #32]
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023be:	b480      	push	{r7}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f023 0210 	bic.w	r2, r3, #16
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	031b      	lsls	r3, r3, #12
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	621a      	str	r2, [r3, #32]
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	f043 0307 	orr.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	021a      	lsls	r2, r3, #8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	431a      	orrs	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e050      	b.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d013      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a15      	ldr	r2, [pc, #84]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10c      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800
 8002568:	40000c00 	.word	0x40000c00
 800256c:	40014000 	.word	0x40014000

08002570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e03f      	b.n	800262a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fa62 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f829 	bl	8002634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002638:	b09f      	sub	sp, #124	; 0x7c
 800263a:	af00      	add	r7, sp, #0
 800263c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264a:	68d9      	ldr	r1, [r3, #12]
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	ea40 0301 	orr.w	r3, r0, r1
 8002654:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	431a      	orrs	r2, r3
 8002666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4313      	orrs	r3, r2
 800266c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002678:	f021 010c 	bic.w	r1, r1, #12
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002682:	430b      	orrs	r3, r1
 8002684:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002692:	6999      	ldr	r1, [r3, #24]
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	ea40 0301 	orr.w	r3, r0, r1
 800269c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800269e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4bc5      	ldr	r3, [pc, #788]	; (80029b8 <UART_SetConfig+0x384>)
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d004      	beq.n	80026b2 <UART_SetConfig+0x7e>
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4bc3      	ldr	r3, [pc, #780]	; (80029bc <UART_SetConfig+0x388>)
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d103      	bne.n	80026ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026b2:	f7ff fa63 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 80026b6:	6778      	str	r0, [r7, #116]	; 0x74
 80026b8:	e002      	b.n	80026c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ba:	f7ff fa4b 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80026be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c8:	f040 80b6 	bne.w	8002838 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ce:	461c      	mov	r4, r3
 80026d0:	f04f 0500 	mov.w	r5, #0
 80026d4:	4622      	mov	r2, r4
 80026d6:	462b      	mov	r3, r5
 80026d8:	1891      	adds	r1, r2, r2
 80026da:	6439      	str	r1, [r7, #64]	; 0x40
 80026dc:	415b      	adcs	r3, r3
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
 80026e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026e4:	1912      	adds	r2, r2, r4
 80026e6:	eb45 0303 	adc.w	r3, r5, r3
 80026ea:	f04f 0000 	mov.w	r0, #0
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	00d9      	lsls	r1, r3, #3
 80026f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026f8:	00d0      	lsls	r0, r2, #3
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	1911      	adds	r1, r2, r4
 8002700:	6639      	str	r1, [r7, #96]	; 0x60
 8002702:	416b      	adcs	r3, r5
 8002704:	667b      	str	r3, [r7, #100]	; 0x64
 8002706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	461a      	mov	r2, r3
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	1891      	adds	r1, r2, r2
 8002712:	63b9      	str	r1, [r7, #56]	; 0x38
 8002714:	415b      	adcs	r3, r3
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800271c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002720:	f7fd fd5e 	bl	80001e0 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4ba5      	ldr	r3, [pc, #660]	; (80029c0 <UART_SetConfig+0x38c>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	011e      	lsls	r6, r3, #4
 8002732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002734:	461c      	mov	r4, r3
 8002736:	f04f 0500 	mov.w	r5, #0
 800273a:	4622      	mov	r2, r4
 800273c:	462b      	mov	r3, r5
 800273e:	1891      	adds	r1, r2, r2
 8002740:	6339      	str	r1, [r7, #48]	; 0x30
 8002742:	415b      	adcs	r3, r3
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
 8002746:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800274a:	1912      	adds	r2, r2, r4
 800274c:	eb45 0303 	adc.w	r3, r5, r3
 8002750:	f04f 0000 	mov.w	r0, #0
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	00d9      	lsls	r1, r3, #3
 800275a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800275e:	00d0      	lsls	r0, r2, #3
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	1911      	adds	r1, r2, r4
 8002766:	65b9      	str	r1, [r7, #88]	; 0x58
 8002768:	416b      	adcs	r3, r5
 800276a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	461a      	mov	r2, r3
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	1891      	adds	r1, r2, r2
 8002778:	62b9      	str	r1, [r7, #40]	; 0x28
 800277a:	415b      	adcs	r3, r3
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002782:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002786:	f7fd fd2b 	bl	80001e0 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4b8c      	ldr	r3, [pc, #560]	; (80029c0 <UART_SetConfig+0x38c>)
 8002790:	fba3 1302 	umull	r1, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	2164      	movs	r1, #100	; 0x64
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	3332      	adds	r3, #50	; 0x32
 80027a2:	4a87      	ldr	r2, [pc, #540]	; (80029c0 <UART_SetConfig+0x38c>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027b0:	441e      	add	r6, r3
 80027b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b4:	4618      	mov	r0, r3
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	1894      	adds	r4, r2, r2
 80027c0:	623c      	str	r4, [r7, #32]
 80027c2:	415b      	adcs	r3, r3
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027ca:	1812      	adds	r2, r2, r0
 80027cc:	eb41 0303 	adc.w	r3, r1, r3
 80027d0:	f04f 0400 	mov.w	r4, #0
 80027d4:	f04f 0500 	mov.w	r5, #0
 80027d8:	00dd      	lsls	r5, r3, #3
 80027da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027de:	00d4      	lsls	r4, r2, #3
 80027e0:	4622      	mov	r2, r4
 80027e2:	462b      	mov	r3, r5
 80027e4:	1814      	adds	r4, r2, r0
 80027e6:	653c      	str	r4, [r7, #80]	; 0x50
 80027e8:	414b      	adcs	r3, r1
 80027ea:	657b      	str	r3, [r7, #84]	; 0x54
 80027ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	461a      	mov	r2, r3
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	1891      	adds	r1, r2, r2
 80027f8:	61b9      	str	r1, [r7, #24]
 80027fa:	415b      	adcs	r3, r3
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002802:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002806:	f7fd fceb 	bl	80001e0 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <UART_SetConfig+0x38c>)
 8002810:	fba3 1302 	umull	r1, r3, r3, r2
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	2164      	movs	r1, #100	; 0x64
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	3332      	adds	r3, #50	; 0x32
 8002822:	4a67      	ldr	r2, [pc, #412]	; (80029c0 <UART_SetConfig+0x38c>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	f003 0207 	and.w	r2, r3, #7
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4432      	add	r2, r6
 8002834:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002836:	e0b9      	b.n	80029ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	461c      	mov	r4, r3
 800283c:	f04f 0500 	mov.w	r5, #0
 8002840:	4622      	mov	r2, r4
 8002842:	462b      	mov	r3, r5
 8002844:	1891      	adds	r1, r2, r2
 8002846:	6139      	str	r1, [r7, #16]
 8002848:	415b      	adcs	r3, r3
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002850:	1912      	adds	r2, r2, r4
 8002852:	eb45 0303 	adc.w	r3, r5, r3
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	00d9      	lsls	r1, r3, #3
 8002860:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002864:	00d0      	lsls	r0, r2, #3
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	eb12 0804 	adds.w	r8, r2, r4
 800286e:	eb43 0905 	adc.w	r9, r3, r5
 8002872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4618      	mov	r0, r3
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	008b      	lsls	r3, r1, #2
 8002886:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800288a:	0082      	lsls	r2, r0, #2
 800288c:	4640      	mov	r0, r8
 800288e:	4649      	mov	r1, r9
 8002890:	f7fd fca6 	bl	80001e0 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <UART_SetConfig+0x38c>)
 800289a:	fba3 2302 	umull	r2, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	011e      	lsls	r6, r3, #4
 80028a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a4:	4618      	mov	r0, r3
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	1894      	adds	r4, r2, r2
 80028b0:	60bc      	str	r4, [r7, #8]
 80028b2:	415b      	adcs	r3, r3
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ba:	1812      	adds	r2, r2, r0
 80028bc:	eb41 0303 	adc.w	r3, r1, r3
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	f04f 0500 	mov.w	r5, #0
 80028c8:	00dd      	lsls	r5, r3, #3
 80028ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028ce:	00d4      	lsls	r4, r2, #3
 80028d0:	4622      	mov	r2, r4
 80028d2:	462b      	mov	r3, r5
 80028d4:	1814      	adds	r4, r2, r0
 80028d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80028d8:	414b      	adcs	r3, r1
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	008b      	lsls	r3, r1, #2
 80028f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028f4:	0082      	lsls	r2, r0, #2
 80028f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028fa:	f7fd fc71 	bl	80001e0 <__aeabi_uldivmod>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <UART_SetConfig+0x38c>)
 8002904:	fba3 1302 	umull	r1, r3, r3, r2
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	3332      	adds	r3, #50	; 0x32
 8002916:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <UART_SetConfig+0x38c>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	441e      	add	r6, r3
 8002924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002926:	4618      	mov	r0, r3
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	1894      	adds	r4, r2, r2
 8002932:	603c      	str	r4, [r7, #0]
 8002934:	415b      	adcs	r3, r3
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293c:	1812      	adds	r2, r2, r0
 800293e:	eb41 0303 	adc.w	r3, r1, r3
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	f04f 0500 	mov.w	r5, #0
 800294a:	00dd      	lsls	r5, r3, #3
 800294c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002950:	00d4      	lsls	r4, r2, #3
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	eb12 0a00 	adds.w	sl, r2, r0
 800295a:	eb43 0b01 	adc.w	fp, r3, r1
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f04f 0100 	mov.w	r1, #0
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	008b      	lsls	r3, r1, #2
 8002972:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002976:	0082      	lsls	r2, r0, #2
 8002978:	4650      	mov	r0, sl
 800297a:	4659      	mov	r1, fp
 800297c:	f7fd fc30 	bl	80001e0 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <UART_SetConfig+0x38c>)
 8002986:	fba3 1302 	umull	r1, r3, r3, r2
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2164      	movs	r1, #100	; 0x64
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	3332      	adds	r3, #50	; 0x32
 8002998:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <UART_SetConfig+0x38c>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4432      	add	r2, r6
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	377c      	adds	r7, #124	; 0x7c
 80029b0:	46bd      	mov	sp, r7
 80029b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b6:	bf00      	nop
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40011400 	.word	0x40011400
 80029c0:	51eb851f 	.word	0x51eb851f

080029c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f103 0208 	add.w	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f103 0208 	add.w	r2, r3, #8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f103 0208 	add.w	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d103      	bne.n	8002a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e00c      	b.n	8002aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3308      	adds	r3, #8
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e002      	b.n	8002a94 <vListInsert+0x2e>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d2f6      	bcs.n	8002a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6852      	ldr	r2, [r2, #4]
 8002af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d103      	bne.n	8002b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b56:	f001 fe5d 	bl	8004814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	441a      	add	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	3b01      	subs	r3, #1
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	441a      	add	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d114      	bne.n	8002bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01a      	beq.n	8002bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f923 	bl	8003e04 <xTaskRemoveFromEventList>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <xQueueGenericReset+0xcc>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	e009      	b.n	8002bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3310      	adds	r3, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fef2 	bl	80029c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff feed 	bl	80029c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bea:	f001 fe43 	bl	8004874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	613b      	str	r3, [r7, #16]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3348      	adds	r3, #72	; 0x48
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 ff0f 	bl	8004a58 <pvPortMalloc>
 8002c3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d011      	beq.n	8002c66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3348      	adds	r3, #72	; 0x48
 8002c4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f805 	bl	8002c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c66:	69bb      	ldr	r3, [r7, #24]
	}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e002      	b.n	8002c92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	69b8      	ldr	r0, [r7, #24]
 8002ca2:	f7ff ff43 	bl	8002b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericSend+0x32>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d103      	bne.n	8002cf0 <xQueueGenericSend+0x40>
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <xQueueGenericSend+0x44>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <xQueueGenericSend+0x46>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <xQueueGenericSend+0x60>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d103      	bne.n	8002d1e <xQueueGenericSend+0x6e>
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <xQueueGenericSend+0x72>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <xQueueGenericSend+0x74>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGenericSend+0x8e>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	623b      	str	r3, [r7, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d3e:	f001 fa1d 	bl	800417c <xTaskGetSchedulerState>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xQueueGenericSend+0x9e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xQueueGenericSend+0xa2>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xQueueGenericSend+0xa4>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericSend+0xbe>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61fb      	str	r3, [r7, #28]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d6e:	f001 fd51 	bl	8004814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <xQueueGenericSend+0xd4>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d129      	bne.n	8002dd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d8a:	f000 fb21 	bl	80033d0 <prvCopyDataToQueue>
 8002d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 f831 	bl	8003e04 <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <xQueueGenericSend+0x1f8>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	e00a      	b.n	8002dd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <xQueueGenericSend+0x1f8>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dd0:	f001 fd50 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e063      	b.n	8002ea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dde:	f001 fd49 	bl	8004874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e05c      	b.n	8002ea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f869 	bl	8003ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002df6:	2301      	movs	r3, #1
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dfa:	f001 fd3b 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dfe:	f000 fe1f 	bl	8003a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e02:	f001 fd07 	bl	8004814 <vPortEnterCritical>
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d103      	bne.n	8002e1c <xQueueGenericSend+0x16c>
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d103      	bne.n	8002e32 <xQueueGenericSend+0x182>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e32:	f001 fd1f 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e36:	1d3a      	adds	r2, r7, #4
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f858 	bl	8003ef4 <xTaskCheckForTimeOut>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d124      	bne.n	8002e94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4c:	f000 fbb8 	bl	80035c0 <prvIsQueueFull>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	3310      	adds	r3, #16
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 ffac 	bl	8003dbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e66:	f000 fb43 	bl	80034f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e6a:	f000 fdf7 	bl	8003a5c <xTaskResumeAll>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af7c 	bne.w	8002d6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <xQueueGenericSend+0x1f8>)
 8002e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	e772      	b.n	8002d6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f000 fb31 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e8e:	f000 fde5 	bl	8003a5c <xTaskResumeAll>
 8002e92:	e76c      	b.n	8002d6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e96:	f000 fb2b 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e9a:	f000 fddf 	bl	8003a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	623b      	str	r3, [r7, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	61fb      	str	r3, [r7, #28]
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <xQueueGiveFromISR+0x58>
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <xQueueGiveFromISR+0x5c>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <xQueueGiveFromISR+0x5e>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	61bb      	str	r3, [r7, #24]
}
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f24:	f001 fd58 	bl	80049d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f28:	f3ef 8211 	mrs	r2, BASEPRI
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	617a      	str	r2, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f40:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d22b      	bcs.n	8002fac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d112      	bne.n	8002f96 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d016      	beq.n	8002fa6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 ff41 	bl	8003e04 <xTaskRemoveFromEventList>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e007      	b.n	8002fa6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	b25a      	sxtb	r2, r3
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002faa:	e001      	b.n	8002fb0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3738      	adds	r7, #56	; 0x38
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <xQueueReceive+0x30>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	623b      	str	r3, [r7, #32]
}
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <xQueueReceive+0x3e>
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <xQueueReceive+0x42>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <xQueueReceive+0x44>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueReceive+0x5e>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	61fb      	str	r3, [r7, #28]
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003026:	f001 f8a9 	bl	800417c <xTaskGetSchedulerState>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <xQueueReceive+0x6e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <xQueueReceive+0x72>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <xQueueReceive+0x74>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <xQueueReceive+0x8e>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	61bb      	str	r3, [r7, #24]
}
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003056:	f001 fbdd 	bl	8004814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01f      	beq.n	80030a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800306a:	f000 fa1b 	bl	80034a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00f      	beq.n	800309e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	3310      	adds	r3, #16
 8003082:	4618      	mov	r0, r3
 8003084:	f000 febe 	bl	8003e04 <xTaskRemoveFromEventList>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800308e:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <xQueueReceive+0x1bc>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800309e:	f001 fbe9 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e069      	b.n	800317a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ac:	f001 fbe2 	bl	8004874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e062      	b.n	800317a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 ff02 	bl	8003ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030c4:	2301      	movs	r3, #1
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030c8:	f001 fbd4 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030cc:	f000 fcb8 	bl	8003a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030d0:	f001 fba0 	bl	8004814 <vPortEnterCritical>
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030da:	b25b      	sxtb	r3, r3
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d103      	bne.n	80030ea <xQueueReceive+0x122>
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d103      	bne.n	8003100 <xQueueReceive+0x138>
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003100:	f001 fbb8 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003104:	1d3a      	adds	r2, r7, #4
 8003106:	f107 0310 	add.w	r3, r7, #16
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fef1 	bl	8003ef4 <xTaskCheckForTimeOut>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d123      	bne.n	8003160 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311a:	f000 fa3b 	bl	8003594 <prvIsQueueEmpty>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	3324      	adds	r3, #36	; 0x24
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fe45 	bl	8003dbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003134:	f000 f9dc 	bl	80034f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003138:	f000 fc90 	bl	8003a5c <xTaskResumeAll>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d189      	bne.n	8003056 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <xQueueReceive+0x1bc>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	e780      	b.n	8003056 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003156:	f000 f9cb 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800315a:	f000 fc7f 	bl	8003a5c <xTaskResumeAll>
 800315e:	e77a      	b.n	8003056 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003162:	f000 f9c5 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003166:	f000 fc79 	bl	8003a5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800316a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316c:	f000 fa12 	bl	8003594 <prvIsQueueEmpty>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	f43f af6f 	beq.w	8003056 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003178:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800317a:	4618      	mov	r0, r3
 800317c:	3730      	adds	r7, #48	; 0x30
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08e      	sub	sp, #56	; 0x38
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800319a:	2300      	movs	r3, #0
 800319c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	623b      	str	r3, [r7, #32]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	61fb      	str	r3, [r7, #28]
}
 80031d4:	bf00      	nop
 80031d6:	e7fe      	b.n	80031d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d8:	f000 ffd0 	bl	800417c <xTaskGetSchedulerState>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <xQueueSemaphoreTake+0x60>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <xQueueSemaphoreTake+0x64>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <xQueueSemaphoreTake+0x66>
 80031ec:	2300      	movs	r3, #0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61bb      	str	r3, [r7, #24]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003208:	f001 fb04 	bl	8004814 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d024      	beq.n	8003262 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003228:	f001 f950 	bl	80044cc <pvTaskIncrementMutexHeldCount>
 800322c:	4602      	mov	r2, r0
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00f      	beq.n	800325a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	3310      	adds	r3, #16
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fde0 	bl	8003e04 <xTaskRemoveFromEventList>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800324a:	4b54      	ldr	r3, [pc, #336]	; (800339c <xQueueSemaphoreTake+0x214>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800325a:	f001 fb0b 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 800325e:	2301      	movs	r3, #1
 8003260:	e097      	b.n	8003392 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	617b      	str	r3, [r7, #20]
}
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003284:	f001 faf6 	bl	8004874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003288:	2300      	movs	r3, #0
 800328a:	e082      	b.n	8003392 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003292:	f107 030c 	add.w	r3, r7, #12
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fe16 	bl	8003ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032a0:	f001 fae8 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032a4:	f000 fbcc 	bl	8003a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032a8:	f001 fab4 	bl	8004814 <vPortEnterCritical>
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d103      	bne.n	80032c2 <xQueueSemaphoreTake+0x13a>
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d103      	bne.n	80032d8 <xQueueSemaphoreTake+0x150>
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d8:	f001 facc 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032dc:	463a      	mov	r2, r7
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fe05 	bl	8003ef4 <xTaskCheckForTimeOut>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d132      	bne.n	8003356 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f2:	f000 f94f 	bl	8003594 <prvIsQueueEmpty>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d026      	beq.n	800334a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003304:	f001 fa86 	bl	8004814 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 ff53 	bl	80041b8 <xTaskPriorityInherit>
 8003312:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003314:	f001 faae 	bl	8004874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	3324      	adds	r3, #36	; 0x24
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fd4b 	bl	8003dbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003328:	f000 f8e2 	bl	80034f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800332c:	f000 fb96 	bl	8003a5c <xTaskResumeAll>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f47f af68 	bne.w	8003208 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <xQueueSemaphoreTake+0x214>)
 800333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	e75e      	b.n	8003208 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800334a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800334c:	f000 f8d0 	bl	80034f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003350:	f000 fb84 	bl	8003a5c <xTaskResumeAll>
 8003354:	e758      	b.n	8003208 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003358:	f000 f8ca 	bl	80034f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800335c:	f000 fb7e 	bl	8003a5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003362:	f000 f917 	bl	8003594 <prvIsQueueEmpty>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f43f af4d 	beq.w	8003208 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003374:	f001 fa4e 	bl	8004814 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800337a:	f000 f811 	bl	80033a0 <prvGetDisinheritPriorityAfterTimeout>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f812 	bl	80043b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800338c:	f001 fa72 	bl	8004874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003392:	4618      	mov	r0, r3
 8003394:	3738      	adds	r7, #56	; 0x38
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e001      	b.n	80033c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80033c2:	68fb      	ldr	r3, [r7, #12]
	}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d14d      	bne.n	8003492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ff52 	bl	80042a4 <xTaskPriorityDisinherit>
 8003400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e043      	b.n	8003492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d119      	bne.n	8003444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6858      	ldr	r0, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	461a      	mov	r2, r3
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	f001 fd2a 	bl	8004e74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	441a      	add	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d32b      	bcc.n	8003492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e026      	b.n	8003492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68d8      	ldr	r0, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	461a      	mov	r2, r3
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	f001 fd10 	bl	8004e74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	425b      	negs	r3, r3
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d207      	bcs.n	8003480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	425b      	negs	r3, r3
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d105      	bne.n	8003492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	3b01      	subs	r3, #1
 8003490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d303      	bcc.n	80034d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68d9      	ldr	r1, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	461a      	mov	r2, r3
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f001 fcc6 	bl	8004e74 <memcpy>
	}
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034f8:	f001 f98c 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003504:	e011      	b.n	800352a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3324      	adds	r3, #36	; 0x24
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fc76 	bl	8003e04 <xTaskRemoveFromEventList>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800351e:	f000 fd4b 	bl	8003fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	3b01      	subs	r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	dce9      	bgt.n	8003506 <prvUnlockQueue+0x16>
 8003532:	e000      	b.n	8003536 <prvUnlockQueue+0x46>
					break;
 8003534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800353e:	f001 f999 	bl	8004874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003542:	f001 f967 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800354c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800354e:	e011      	b.n	8003574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fc51 	bl	8003e04 <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003568:	f000 fd26 	bl	8003fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	3b01      	subs	r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003578:	2b00      	cmp	r3, #0
 800357a:	dce9      	bgt.n	8003550 <prvUnlockQueue+0x60>
 800357c:	e000      	b.n	8003580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800357e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003588:	f001 f974 	bl	8004874 <vPortExitCritical>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800359c:	f001 f93a 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e001      	b.n	80035b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035b2:	f001 f95f 	bl	8004874 <vPortExitCritical>

	return xReturn;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035c8:	f001 f924 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d102      	bne.n	80035de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e001      	b.n	80035e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 f947 	bl	8004874 <vPortExitCritical>

	return xReturn;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	; 0x38
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	623b      	str	r3, [r7, #32]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <xTaskCreateStatic+0x46>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	61fb      	str	r3, [r7, #28]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003636:	2354      	movs	r3, #84	; 0x54
 8003638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b54      	cmp	r3, #84	; 0x54
 800363e:	d00a      	beq.n	8003656 <xTaskCreateStatic+0x66>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61bb      	str	r3, [r7, #24]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003656:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01e      	beq.n	800369c <xTaskCreateStatic+0xac>
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800366c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	2202      	movs	r2, #2
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003676:	2300      	movs	r3, #0
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f850 	bl	8003734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003696:	f000 f8d5 	bl	8003844 <prvAddNewTaskToReadyList>
 800369a:	e001      	b.n	80036a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036a0:	697b      	ldr	r3, [r7, #20]
	}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08c      	sub	sp, #48	; 0x30
 80036ae:	af04      	add	r7, sp, #16
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f9ca 	bl	8004a58 <pvPortMalloc>
 80036c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036cc:	2054      	movs	r0, #84	; 0x54
 80036ce:	f001 f9c3 	bl	8004a58 <pvPortMalloc>
 80036d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	e005      	b.n	80036ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f001 fa84 	bl	8004bf0 <vPortFree>
 80036e8:	e001      	b.n	80036ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d017      	beq.n	8003724 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fc:	88fa      	ldrh	r2, [r7, #6]
 80036fe:	2300      	movs	r3, #0
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f80e 	bl	8003734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003718:	69f8      	ldr	r0, [r7, #28]
 800371a:	f000 f893 	bl	8003844 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e002      	b.n	800372a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800372a:	69bb      	ldr	r3, [r7, #24]
	}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800374c:	3b01      	subs	r3, #1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f023 0307 	bic.w	r3, r3, #7
 800375a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	617b      	str	r3, [r7, #20]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01f      	beq.n	80037c2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e012      	b.n	80037ae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	7819      	ldrb	r1, [r3, #0]
 8003790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	3334      	adds	r3, #52	; 0x34
 8003798:	460a      	mov	r2, r1
 800379a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d9e9      	bls.n	8003788 <prvInitialiseNewTask+0x54>
 80037b4:	e000      	b.n	80037b8 <prvInitialiseNewTask+0x84>
			{
				break;
 80037b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	e003      	b.n	80037ca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d901      	bls.n	80037d4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d0:	2306      	movs	r3, #6
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	2200      	movs	r2, #0
 80037e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	3304      	adds	r3, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f90a 	bl	8002a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	3318      	adds	r3, #24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f905 	bl	8002a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	f1c3 0207 	rsb	r2, r3, #7
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	2200      	movs	r2, #0
 8003814:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	69b8      	ldr	r0, [r7, #24]
 8003824:	f000 fecc 	bl	80045c0 <pxPortInitialiseStack>
 8003828:	4602      	mov	r2, r0
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383a:	bf00      	nop
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800384c:	f000 ffe2 	bl	8004814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <prvAddNewTaskToReadyList+0xb8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a29      	ldr	r2, [pc, #164]	; (80038fc <prvAddNewTaskToReadyList+0xb8>)
 8003858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <prvAddNewTaskToReadyList+0xbc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003862:	4a27      	ldr	r2, [pc, #156]	; (8003900 <prvAddNewTaskToReadyList+0xbc>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <prvAddNewTaskToReadyList+0xb8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d110      	bne.n	8003892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003870:	f000 fbc6 	bl	8004000 <prvInitialiseTaskLists>
 8003874:	e00d      	b.n	8003892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <prvAddNewTaskToReadyList+0xc0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <prvAddNewTaskToReadyList+0xbc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d802      	bhi.n	8003892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <prvAddNewTaskToReadyList+0xbc>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <prvAddNewTaskToReadyList+0xc4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <prvAddNewTaskToReadyList+0xc4>)
 800389a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	2201      	movs	r2, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <prvAddNewTaskToReadyList+0xc8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <prvAddNewTaskToReadyList+0xc8>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4a15      	ldr	r2, [pc, #84]	; (8003910 <prvAddNewTaskToReadyList+0xcc>)
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f7ff f8aa 	bl	8002a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ca:	f000 ffd3 	bl	8004874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <prvAddNewTaskToReadyList+0xc0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <prvAddNewTaskToReadyList+0xbc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d207      	bcs.n	80038f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <prvAddNewTaskToReadyList+0xd0>)
 80038e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000384 	.word	0x20000384
 8003900:	20000284 	.word	0x20000284
 8003904:	20000390 	.word	0x20000390
 8003908:	200003a0 	.word	0x200003a0
 800390c:	2000038c 	.word	0x2000038c
 8003910:	20000288 	.word	0x20000288
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d017      	beq.n	800395a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <vTaskDelay+0x60>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <vTaskDelay+0x30>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	60bb      	str	r3, [r7, #8]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003948:	f000 f87a 	bl	8003a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800394c:	2100      	movs	r1, #0
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fdd0 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003954:	f000 f882 	bl	8003a5c <xTaskResumeAll>
 8003958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <vTaskDelay+0x64>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200003ac 	.word	0x200003ac
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800398e:	463a      	mov	r2, r7
 8003990:	1d39      	adds	r1, r7, #4
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f7fc fd9e 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	460a      	mov	r2, r1
 80039ae:	491e      	ldr	r1, [pc, #120]	; (8003a28 <vTaskStartScheduler+0xa8>)
 80039b0:	481e      	ldr	r0, [pc, #120]	; (8003a2c <vTaskStartScheduler+0xac>)
 80039b2:	f7ff fe1d 	bl	80035f0 <xTaskCreateStatic>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <vTaskStartScheduler+0xb0>)
 80039ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <vTaskStartScheduler+0xb0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c4:	2301      	movs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e001      	b.n	80039ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d116      	bne.n	8003a02 <vTaskStartScheduler+0x82>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	613b      	str	r3, [r7, #16]
}
 80039e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <vTaskStartScheduler+0xb4>)
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <vTaskStartScheduler+0xb8>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <vTaskStartScheduler+0xbc>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039fc:	f000 fe68 	bl	80046d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a00:	e00e      	b.n	8003a20 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d10a      	bne.n	8003a20 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	60fb      	str	r3, [r7, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <vTaskStartScheduler+0x9e>
}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	08004ed0 	.word	0x08004ed0
 8003a2c:	08003fd1 	.word	0x08003fd1
 8003a30:	200003a8 	.word	0x200003a8
 8003a34:	200003a4 	.word	0x200003a4
 8003a38:	20000390 	.word	0x20000390
 8003a3c:	20000388 	.word	0x20000388

08003a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <vTaskSuspendAll+0x18>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <vTaskSuspendAll+0x18>)
 8003a4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	200003ac 	.word	0x200003ac

08003a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	603b      	str	r3, [r7, #0]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a88:	f000 fec4 	bl	8004814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d161      	bne.n	8003b62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a9e:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <xTaskResumeAll+0x118>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d05d      	beq.n	8003b62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa6:	e02e      	b.n	8003b06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <xTaskResumeAll+0x11c>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f80f 	bl	8002ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff f80a 	bl	8002ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <xTaskResumeAll+0x120>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <xTaskResumeAll+0x120>)
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <xTaskResumeAll+0x124>)
 8003ae4:	441a      	add	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7fe ff96 	bl	8002a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <xTaskResumeAll+0x128>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <xTaskResumeAll+0x11c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1cc      	bne.n	8003aa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b14:	f000 fb12 	bl	800413c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <xTaskResumeAll+0x130>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d010      	beq.n	8003b46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b24:	f000 f836 	bl	8003b94 <xTaskIncrementTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f1      	bne.n	8003b24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <xTaskResumeAll+0x130>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <xTaskResumeAll+0x134>)
 8003b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b62:	f000 fe87 	bl	8004874 <vPortExitCritical>

	return xAlreadyYielded;
 8003b66:	68bb      	ldr	r3, [r7, #8]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200003ac 	.word	0x200003ac
 8003b74:	20000384 	.word	0x20000384
 8003b78:	20000344 	.word	0x20000344
 8003b7c:	2000038c 	.word	0x2000038c
 8003b80:	20000288 	.word	0x20000288
 8003b84:	20000284 	.word	0x20000284
 8003b88:	20000398 	.word	0x20000398
 8003b8c:	20000394 	.word	0x20000394
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <xTaskIncrementTick+0x144>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 808e 	bne.w	8003cc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ba8:	4b4c      	ldr	r3, [pc, #304]	; (8003cdc <xTaskIncrementTick+0x148>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <xTaskIncrementTick+0x148>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d120      	bne.n	8003bfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bbc:	4b48      	ldr	r3, [pc, #288]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <xTaskIncrementTick+0x48>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	603b      	str	r3, [r7, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xTaskIncrementTick+0x46>
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <xTaskIncrementTick+0x150>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3e      	ldr	r2, [pc, #248]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <xTaskIncrementTick+0x150>)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	f000 fa9f 	bl	800413c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <xTaskIncrementTick+0x158>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d348      	bcc.n	8003c9a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <xTaskIncrementTick+0x158>)
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	601a      	str	r2, [r3, #0]
					break;
 8003c1a:	e03e      	b.n	8003c9a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d203      	bcs.n	8003c3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c34:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <xTaskIncrementTick+0x158>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c3a:	e02e      	b.n	8003c9a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe ff49 	bl	8002ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3318      	adds	r3, #24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe ff40 	bl	8002ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003c78:	441a      	add	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7fe fecc 	bl	8002a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <xTaskIncrementTick+0x164>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3b9      	bcc.n	8003c08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c98:	e7b6      	b.n	8003c08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <xTaskIncrementTick+0x164>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4914      	ldr	r1, [pc, #80]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d901      	bls.n	8003cb6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <xTaskIncrementTick+0x168>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e004      	b.n	8003cce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <xTaskIncrementTick+0x16c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <xTaskIncrementTick+0x16c>)
 8003ccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cce:	697b      	ldr	r3, [r7, #20]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200003ac 	.word	0x200003ac
 8003cdc:	20000388 	.word	0x20000388
 8003ce0:	2000033c 	.word	0x2000033c
 8003ce4:	20000340 	.word	0x20000340
 8003ce8:	2000039c 	.word	0x2000039c
 8003cec:	200003a4 	.word	0x200003a4
 8003cf0:	2000038c 	.word	0x2000038c
 8003cf4:	20000288 	.word	0x20000288
 8003cf8:	20000284 	.word	0x20000284
 8003cfc:	20000398 	.word	0x20000398
 8003d00:	20000394 	.word	0x20000394

08003d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d0a:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <vTaskSwitchContext+0xa4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d12:	4b26      	ldr	r3, [pc, #152]	; (8003dac <vTaskSwitchContext+0xa8>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d18:	e03f      	b.n	8003d9a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <vTaskSwitchContext+0xa8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <vTaskSwitchContext+0xac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	f1c3 031f 	rsb	r3, r3, #31
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	491f      	ldr	r1, [pc, #124]	; (8003db4 <vTaskSwitchContext+0xb0>)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	607b      	str	r3, [r7, #4]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <vTaskSwitchContext+0x5a>
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <vTaskSwitchContext+0xb0>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3308      	adds	r3, #8
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d104      	bne.n	8003d90 <vTaskSwitchContext+0x8c>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <vTaskSwitchContext+0xb4>)
 8003d98:	6013      	str	r3, [r2, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	200003ac 	.word	0x200003ac
 8003dac:	20000398 	.word	0x20000398
 8003db0:	2000038c 	.word	0x2000038c
 8003db4:	20000288 	.word	0x20000288
 8003db8:	20000284 	.word	0x20000284

08003dbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <vTaskPlaceOnEventList+0x44>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3318      	adds	r3, #24
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fe3b 	bl	8002a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003df0:	2101      	movs	r1, #1
 8003df2:	6838      	ldr	r0, [r7, #0]
 8003df4:	f000 fb7e 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000284 	.word	0x20000284

08003e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fe4f 	bl	8002ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <xTaskRemoveFromEventList+0xac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d11c      	bne.n	8003e7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fe46 	bl	8002ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <xTaskRemoveFromEventList+0xb0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <xTaskRemoveFromEventList+0xb0>)
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <xTaskRemoveFromEventList+0xb4>)
 8003e6c:	441a      	add	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe fdd2 	bl	8002a1e <vListInsertEnd>
 8003e7a:	e005      	b.n	8003e88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	4619      	mov	r1, r3
 8003e82:	480e      	ldr	r0, [pc, #56]	; (8003ebc <xTaskRemoveFromEventList+0xb8>)
 8003e84:	f7fe fdcb 	bl	8002a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <xTaskRemoveFromEventList+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d905      	bls.n	8003ea2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <xTaskRemoveFromEventList+0xc0>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e001      	b.n	8003ea6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	200003ac 	.word	0x200003ac
 8003eb4:	2000038c 	.word	0x2000038c
 8003eb8:	20000288 	.word	0x20000288
 8003ebc:	20000344 	.word	0x20000344
 8003ec0:	20000284 	.word	0x20000284
 8003ec4:	20000398 	.word	0x20000398

08003ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <vTaskInternalSetTimeOutState+0x24>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <vTaskInternalSetTimeOutState+0x28>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	605a      	str	r2, [r3, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	2000039c 	.word	0x2000039c
 8003ef0:	20000388 	.word	0x20000388

08003ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f36:	f000 fc6d 	bl	8004814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <xTaskCheckForTimeOut+0xbc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d102      	bne.n	8003f5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e023      	b.n	8003fa2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <xTaskCheckForTimeOut+0xc0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d007      	beq.n	8003f76 <xTaskCheckForTimeOut+0x82>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e015      	b.n	8003fa2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d20b      	bcs.n	8003f98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff9b 	bl	8003ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e004      	b.n	8003fa2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fa2:	f000 fc67 	bl	8004874 <vPortExitCritical>

	return xReturn;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000388 	.word	0x20000388
 8003fb4:	2000039c 	.word	0x2000039c

08003fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <vTaskMissedYield+0x14>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000398 	.word	0x20000398

08003fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fd8:	f000 f852 	bl	8004080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <prvIdleTask+0x28>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d9f9      	bls.n	8003fd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <prvIdleTask+0x2c>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ff4:	e7f0      	b.n	8003fd8 <prvIdleTask+0x8>
 8003ff6:	bf00      	nop
 8003ff8:	20000288 	.word	0x20000288
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	e00c      	b.n	8004026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <prvInitialiseTaskLists+0x60>)
 8004018:	4413      	add	r3, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fcd2 	bl	80029c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3301      	adds	r3, #1
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d9ef      	bls.n	800400c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800402c:	480d      	ldr	r0, [pc, #52]	; (8004064 <prvInitialiseTaskLists+0x64>)
 800402e:	f7fe fcc9 	bl	80029c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004032:	480d      	ldr	r0, [pc, #52]	; (8004068 <prvInitialiseTaskLists+0x68>)
 8004034:	f7fe fcc6 	bl	80029c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004038:	480c      	ldr	r0, [pc, #48]	; (800406c <prvInitialiseTaskLists+0x6c>)
 800403a:	f7fe fcc3 	bl	80029c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800403e:	480c      	ldr	r0, [pc, #48]	; (8004070 <prvInitialiseTaskLists+0x70>)
 8004040:	f7fe fcc0 	bl	80029c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004044:	480b      	ldr	r0, [pc, #44]	; (8004074 <prvInitialiseTaskLists+0x74>)
 8004046:	f7fe fcbd 	bl	80029c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <prvInitialiseTaskLists+0x78>)
 800404c:	4a05      	ldr	r2, [pc, #20]	; (8004064 <prvInitialiseTaskLists+0x64>)
 800404e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <prvInitialiseTaskLists+0x7c>)
 8004052:	4a05      	ldr	r2, [pc, #20]	; (8004068 <prvInitialiseTaskLists+0x68>)
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000288 	.word	0x20000288
 8004064:	20000314 	.word	0x20000314
 8004068:	20000328 	.word	0x20000328
 800406c:	20000344 	.word	0x20000344
 8004070:	20000358 	.word	0x20000358
 8004074:	20000370 	.word	0x20000370
 8004078:	2000033c 	.word	0x2000033c
 800407c:	20000340 	.word	0x20000340

08004080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004086:	e019      	b.n	80040bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004088:	f000 fbc4 	bl	8004814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <prvCheckTasksWaitingTermination+0x50>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fd1d 	bl	8002ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <prvCheckTasksWaitingTermination+0x54>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <prvCheckTasksWaitingTermination+0x54>)
 80040a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <prvCheckTasksWaitingTermination+0x58>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <prvCheckTasksWaitingTermination+0x58>)
 80040b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040b2:	f000 fbdf 	bl	8004874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f810 	bl	80040dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvCheckTasksWaitingTermination+0x58>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e1      	bne.n	8004088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000358 	.word	0x20000358
 80040d4:	20000384 	.word	0x20000384
 80040d8:	2000036c 	.word	0x2000036c

080040dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d108      	bne.n	8004100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fd7c 	bl	8004bf0 <vPortFree>
				vPortFree( pxTCB );
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fd79 	bl	8004bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040fe:	e018      	b.n	8004132 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004106:	2b01      	cmp	r3, #1
 8004108:	d103      	bne.n	8004112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fd70 	bl	8004bf0 <vPortFree>
	}
 8004110:	e00f      	b.n	8004132 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004118:	2b02      	cmp	r3, #2
 800411a:	d00a      	beq.n	8004132 <prvDeleteTCB+0x56>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60fb      	str	r3, [r7, #12]
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <prvDeleteTCB+0x54>
	}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <prvResetNextTaskUnblockTime+0x38>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <prvResetNextTaskUnblockTime+0x3c>)
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004154:	e008      	b.n	8004168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <prvResetNextTaskUnblockTime+0x38>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <prvResetNextTaskUnblockTime+0x3c>)
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	2000033c 	.word	0x2000033c
 8004178:	200003a4 	.word	0x200003a4

0800417c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <xTaskGetSchedulerState+0x34>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800418a:	2301      	movs	r3, #1
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	e008      	b.n	80041a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <xTaskGetSchedulerState+0x38>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004198:	2302      	movs	r3, #2
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e001      	b.n	80041a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041a2:	687b      	ldr	r3, [r7, #4]
	}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	20000390 	.word	0x20000390
 80041b4:	200003ac 	.word	0x200003ac

080041b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d05e      	beq.n	800428c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <xTaskPriorityInherit+0xe0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d24e      	bcs.n	800427a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db06      	blt.n	80041f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e4:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <xTaskPriorityInherit+0xe0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f1c3 0207 	rsb	r2, r3, #7
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4a26      	ldr	r2, [pc, #152]	; (800429c <xTaskPriorityInherit+0xe4>)
 8004204:	4413      	add	r3, r2
 8004206:	4299      	cmp	r1, r3
 8004208:	d12f      	bne.n	800426a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fc62 	bl	8002ad8 <uxListRemove>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	2201      	movs	r2, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43da      	mvns	r2, r3
 8004226:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <xTaskPriorityInherit+0xe8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4013      	ands	r3, r2
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <xTaskPriorityInherit+0xe8>)
 800422e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004230:	4b19      	ldr	r3, [pc, #100]	; (8004298 <xTaskPriorityInherit+0xe0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	2201      	movs	r2, #1
 8004240:	409a      	lsls	r2, r3
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <xTaskPriorityInherit+0xe8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <xTaskPriorityInherit+0xe8>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a10      	ldr	r2, [pc, #64]	; (800429c <xTaskPriorityInherit+0xe4>)
 800425a:	441a      	add	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe fbdb 	bl	8002a1e <vListInsertEnd>
 8004268:	e004      	b.n	8004274 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <xTaskPriorityInherit+0xe0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e008      	b.n	800428c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <xTaskPriorityInherit+0xe0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	429a      	cmp	r2, r3
 8004286:	d201      	bcs.n	800428c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800428c:	68fb      	ldr	r3, [r7, #12]
	}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000284 	.word	0x20000284
 800429c:	20000288 	.word	0x20000288
 80042a0:	2000038c 	.word	0x2000038c

080042a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d06e      	beq.n	8004398 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042ba:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <xTaskPriorityDisinherit+0x100>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d00a      	beq.n	80042da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60bb      	str	r3, [r7, #8]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	429a      	cmp	r2, r3
 800430c:	d044      	beq.n	8004398 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d140      	bne.n	8004398 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3304      	adds	r3, #4
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fbdc 	bl	8002ad8 <uxListRemove>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d115      	bne.n	8004352 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	491f      	ldr	r1, [pc, #124]	; (80043a8 <xTaskPriorityDisinherit+0x104>)
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTaskPriorityDisinherit+0xae>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <xTaskPriorityDisinherit+0x108>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4013      	ands	r3, r2
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <xTaskPriorityDisinherit+0x108>)
 8004350:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	f1c3 0207 	rsb	r2, r3, #7
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	2201      	movs	r2, #1
 800436c:	409a      	lsls	r2, r3
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <xTaskPriorityDisinherit+0x108>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <xTaskPriorityDisinherit+0x108>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <xTaskPriorityDisinherit+0x104>)
 8004386:	441a      	add	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7fe fb45 	bl	8002a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004398:	697b      	ldr	r3, [r7, #20]
	}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000284 	.word	0x20000284
 80043a8:	20000288 	.word	0x20000288
 80043ac:	2000038c 	.word	0x2000038c

080043b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d077      	beq.n	80044b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60fb      	str	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d902      	bls.n	80043f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e002      	b.n	80043fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	429a      	cmp	r2, r3
 8004404:	d058      	beq.n	80044b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	d153      	bne.n	80044b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004410:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	d10a      	bne.n	8004430 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	db04      	blt.n	800444e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f1c3 0207 	rsb	r2, r3, #7
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6959      	ldr	r1, [r3, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800445e:	4413      	add	r3, r2
 8004460:	4299      	cmp	r1, r3
 8004462:	d129      	bne.n	80044b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	3304      	adds	r3, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fb35 	bl	8002ad8 <uxListRemove>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2201      	movs	r2, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4013      	ands	r3, r2
 8004486:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004488:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	2201      	movs	r2, #1
 8004490:	409a      	lsls	r2, r3
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4a06      	ldr	r2, [pc, #24]	; (80044c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80044aa:	441a      	add	r2, r3
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7fe fab3 	bl	8002a1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044b8:	bf00      	nop
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000284 	.word	0x20000284
 80044c4:	20000288 	.word	0x20000288
 80044c8:	2000038c 	.word	0x2000038c

080044cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044de:	3201      	adds	r2, #1
 80044e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80044e2:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80044e4:	681b      	ldr	r3, [r3, #0]
	}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000284 	.word	0x20000284

080044f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004504:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fae4 	bl	8002ad8 <uxListRemove>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	2201      	movs	r2, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4013      	ands	r3, r2
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800452c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d10a      	bne.n	800454c <prvAddCurrentTaskToDelayedList+0x58>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	481a      	ldr	r0, [pc, #104]	; (80045b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004546:	f7fe fa6a 	bl	8002a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800454a:	e026      	b.n	800459a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d209      	bcs.n	8004578 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7fe fa78 	bl	8002a66 <vListInsert>
}
 8004576:	e010      	b.n	800459a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7fe fa6e 	bl	8002a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d202      	bcs.n	800459a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004594:	4a09      	ldr	r2, [pc, #36]	; (80045bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6013      	str	r3, [r2, #0]
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000388 	.word	0x20000388
 80045a8:	20000284 	.word	0x20000284
 80045ac:	2000038c 	.word	0x2000038c
 80045b0:	20000370 	.word	0x20000370
 80045b4:	20000340 	.word	0x20000340
 80045b8:	2000033c 	.word	0x2000033c
 80045bc:	200003a4 	.word	0x200003a4

080045c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3b04      	subs	r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b04      	subs	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045f0:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <pxPortInitialiseStack+0x64>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b14      	subs	r3, #20
 80045fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b04      	subs	r3, #4
 8004606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f06f 0202 	mvn.w	r2, #2
 800460e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b20      	subs	r3, #32
 8004614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	08004629 	.word	0x08004629

08004628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <prvTaskExitError+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d00a      	beq.n	8004652 <prvTaskExitError+0x2a>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <prvTaskExitError+0x28>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60bb      	str	r3, [r7, #8]
}
 8004664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004666:	bf00      	nop
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0fc      	beq.n	8004668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000000c 	.word	0x2000000c

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <prvPortStartFirstTask+0x24>)
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	6800      	ldr	r0, [r0, #0]
 80046ae:	f380 8808 	msr	MSP, r0
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8814 	msr	CONTROL, r0
 80046ba:	b662      	cpsie	i
 80046bc:	b661      	cpsie	f
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	df00      	svc	0
 80046c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ca:	bf00      	nop
 80046cc:	e000ed08 	.word	0xe000ed08

080046d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <xPortStartScheduler+0x120>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <xPortStartScheduler+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10a      	bne.n	80046f6 <xPortStartScheduler+0x26>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <xPortStartScheduler+0x120>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <xPortStartScheduler+0x128>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10a      	bne.n	8004716 <xPortStartScheduler+0x46>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004716:	4b39      	ldr	r3, [pc, #228]	; (80047fc <xPortStartScheduler+0x12c>)
 8004718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	22ff      	movs	r2, #255	; 0xff
 8004726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4b31      	ldr	r3, [pc, #196]	; (8004800 <xPortStartScheduler+0x130>)
 800473c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <xPortStartScheduler+0x134>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004744:	e009      	b.n	800475a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <xPortStartScheduler+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3b01      	subs	r3, #1
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <xPortStartScheduler+0x134>)
 800474e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d0ef      	beq.n	8004746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <xPortStartScheduler+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1c3 0307 	rsb	r3, r3, #7
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00a      	beq.n	8004788 <xPortStartScheduler+0xb8>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <xPortStartScheduler+0x134>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <xPortStartScheduler+0x134>)
 8004790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <xPortStartScheduler+0x134>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <xPortStartScheduler+0x134>)
 800479c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <xPortStartScheduler+0x138>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <xPortStartScheduler+0x138>)
 80047ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <xPortStartScheduler+0x138>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <xPortStartScheduler+0x138>)
 80047b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047be:	f000 f8dd 	bl	800497c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <xPortStartScheduler+0x13c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047c8:	f000 f8fc 	bl	80049c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <xPortStartScheduler+0x140>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <xPortStartScheduler+0x140>)
 80047d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047d8:	f7ff ff66 	bl	80046a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047dc:	f7ff fa92 	bl	8003d04 <vTaskSwitchContext>
	prvTaskExitError();
 80047e0:	f7ff ff22 	bl	8004628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00
 80047f4:	410fc271 	.word	0x410fc271
 80047f8:	410fc270 	.word	0x410fc270
 80047fc:	e000e400 	.word	0xe000e400
 8004800:	200003b0 	.word	0x200003b0
 8004804:	200003b4 	.word	0x200003b4
 8004808:	e000ed20 	.word	0xe000ed20
 800480c:	2000000c 	.word	0x2000000c
 8004810:	e000ef34 	.word	0xe000ef34

08004814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
}
 800482c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <vPortEnterCritical+0x58>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <vPortEnterCritical+0x58>)
 8004836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <vPortEnterCritical+0x58>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10f      	bne.n	8004860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortEnterCritical+0x5c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <vPortEnterCritical+0x4c>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	603b      	str	r3, [r7, #0]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortEnterCritical+0x4a>
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	2000000c 	.word	0x2000000c
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <vPortExitCritical+0x50>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <vPortExitCritical+0x24>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <vPortExitCritical+0x50>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <vPortExitCritical+0x50>)
 80048a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <vPortExitCritical+0x50>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <vPortExitCritical+0x42>
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f383 8811 	msr	BASEPRI, r3
}
 80048b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c
	...

080048d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f01e 0f10 	tst.w	lr, #16
 80048e0:	bf08      	it	eq
 80048e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	6010      	str	r0, [r2, #0]
 80048ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048f4:	f380 8811 	msr	BASEPRI, r0
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f7ff fa00 	bl	8003d04 <vTaskSwitchContext>
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f380 8811 	msr	BASEPRI, r0
 800490c:	bc09      	pop	{r0, r3}
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6808      	ldr	r0, [r1, #0]
 8004912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004916:	f01e 0f10 	tst.w	lr, #16
 800491a:	bf08      	it	eq
 800491c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004920:	f380 8809 	msr	PSP, r0
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst>:
 8004930:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004952:	f7ff f91f 	bl	8003b94 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <SysTick_Handler+0x40>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <vPortSetupTimerInterrupt+0x38>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <vPortSetupTimerInterrupt+0x3c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <vPortSetupTimerInterrupt+0x40>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <vPortSetupTimerInterrupt+0x44>)
 800499a:	3b01      	subs	r3, #1
 800499c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e010 	.word	0xe000e010
 80049b4:	e000e018 	.word	0xe000e018
 80049b8:	20000000 	.word	0x20000000
 80049bc:	10624dd3 	.word	0x10624dd3
 80049c0:	e000e014 	.word	0xe000e014

080049c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049d4 <vPortEnableVFP+0x10>
 80049c8:	6801      	ldr	r1, [r0, #0]
 80049ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ce:	6001      	str	r1, [r0, #0]
 80049d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049d2:	bf00      	nop
 80049d4:	e000ed88 	.word	0xe000ed88

080049d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049de:	f3ef 8305 	mrs	r3, IPSR
 80049e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d914      	bls.n	8004a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <vPortValidateInterruptPriority+0x70>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <vPortValidateInterruptPriority+0x74>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	7afa      	ldrb	r2, [r7, #11]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20a      	bcs.n	8004a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <vPortValidateInterruptPriority+0x78>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <vPortValidateInterruptPriority+0x7c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d90a      	bls.n	8004a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	603b      	str	r3, [r7, #0]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <vPortValidateInterruptPriority+0x60>
	}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000e3f0 	.word	0xe000e3f0
 8004a4c:	200003b0 	.word	0x200003b0
 8004a50:	e000ed0c 	.word	0xe000ed0c
 8004a54:	200003b4 	.word	0x200003b4

08004a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a64:	f7fe ffec 	bl	8003a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <pvPortMalloc+0x180>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a70:	f000 f920 	bl	8004cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <pvPortMalloc+0x184>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8093 	bne.w	8004ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d014      	beq.n	8004ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	617b      	str	r3, [r7, #20]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d06e      	beq.n	8004ba8 <pvPortMalloc+0x150>
 8004aca:	4b45      	ldr	r3, [pc, #276]	; (8004be0 <pvPortMalloc+0x188>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d869      	bhi.n	8004ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ade:	e004      	b.n	8004aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <pvPortMalloc+0xa4>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f1      	bne.n	8004ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004afc:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <pvPortMalloc+0x180>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d050      	beq.n	8004ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	2308      	movs	r3, #8
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d91f      	bls.n	8004b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <pvPortMalloc+0xf8>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	613b      	str	r3, [r7, #16]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f000 f908 	bl	8004d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <pvPortMalloc+0x188>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <pvPortMalloc+0x188>)
 8004b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <pvPortMalloc+0x188>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <pvPortMalloc+0x190>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <pvPortMalloc+0x188>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <pvPortMalloc+0x190>)
 8004b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <pvPortMalloc+0x184>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <pvPortMalloc+0x194>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <pvPortMalloc+0x194>)
 8004ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ba8:	f7fe ff58 	bl	8003a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <pvPortMalloc+0x174>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60fb      	str	r3, [r7, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <pvPortMalloc+0x172>
	return pvReturn;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20003fc0 	.word	0x20003fc0
 8004bdc:	20003fd4 	.word	0x20003fd4
 8004be0:	20003fc4 	.word	0x20003fc4
 8004be4:	20003fb8 	.word	0x20003fb8
 8004be8:	20003fc8 	.word	0x20003fc8
 8004bec:	20003fcc 	.word	0x20003fcc

08004bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04d      	beq.n	8004c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c02:	2308      	movs	r3, #8
 8004c04:	425b      	negs	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <vPortFree+0xb8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vPortFree+0x44>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	60fb      	str	r3, [r7, #12]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <vPortFree+0x62>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60bb      	str	r3, [r7, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <vPortFree+0xb8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11a      	bne.n	8004c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <vPortFree+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c78:	f7fe fee2 	bl	8003a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <vPortFree+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <vPortFree+0xbc>)
 8004c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f874 	bl	8004d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <vPortFree+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <vPortFree+0xc0>)
 8004c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c9a:	f7fe fedf 	bl	8003a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20003fd4 	.word	0x20003fd4
 8004cac:	20003fc4 	.word	0x20003fc4
 8004cb0:	20003fd0 	.word	0x20003fd0

08004cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <prvHeapInit+0xac>)
 8004cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <prvHeapInit+0xac>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <prvHeapInit+0xb0>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <prvHeapInit+0xb0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d00:	2208      	movs	r2, #8
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <prvHeapInit+0xb4>)
 8004d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <prvHeapInit+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvHeapInit+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <prvHeapInit+0xb4>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <prvHeapInit+0xb8>)
 8004d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <prvHeapInit+0xbc>)
 8004d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <prvHeapInit+0xc0>)
 8004d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	200003b8 	.word	0x200003b8
 8004d64:	20003fb8 	.word	0x20003fb8
 8004d68:	20003fc0 	.word	0x20003fc0
 8004d6c:	20003fc8 	.word	0x20003fc8
 8004d70:	20003fc4 	.word	0x20003fc4
 8004d74:	20003fd4 	.word	0x20003fd4

08004d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <prvInsertBlockIntoFreeList+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <prvInsertBlockIntoFreeList+0x14>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d8f7      	bhi.n	8004d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d108      	bne.n	8004dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d118      	bne.n	8004e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d00d      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e008      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d002      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20003fb8 	.word	0x20003fb8
 8004e28:	20003fc0 	.word	0x20003fc0

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 f82e 	bl	8004ea0 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08004ef8 	.word	0x08004ef8
 8004e68:	08004ef8 	.word	0x08004ef8
 8004e6c:	08004ef8 	.word	0x08004ef8
 8004e70:	08004efc 	.word	0x08004efc

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <memset>:
 8004e90:	4402      	add	r2, r0
 8004e92:	4603      	mov	r3, r0
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
